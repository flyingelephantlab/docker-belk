input {
  beats {
    port => 5043
  }
}

## Add filters / logstash plugins configuration here
filter {

	ruby {
        code => "event.set('merchant_name', event.get('source').split('/')[-2])"
    }

   	grok{
	    match => [ 'message', '%{TIMESTAMP_ISO8601:timestamp}' ]
	}

	date{
   	 	match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
   		target => '@timestamp'
   	}

   	grok{
   	    patterns_dir => ["/usr/share/logstash/pipeline/patterns"]
	    match => [ "message", "%{SPIDER_RUN:running}" ]
	}



    ruby {
        code => "event.set('spider_elapsed', Time.now.to_f - event.get('@timestamp').to_f)"
    }

    if "WARNING: Dropped: Item is not valid" in [message]{
        grok{
            match => [ "message", "'url_en': '%{GREEDYDATA:unfinished_dropped_url}'" ]
        }
        grok{
            match => [ "message", ".*status\'\:\s\'(?<unfinished_stock_status>\w*)" ]
        }
    }

    else if "DEBUG: Scraped from" in [message]{
        grok{
            match => [ "message", "'url_en': '%{GREEDYDATA:unfinished_scraped_url}'" ]
        }
        grok{
            match => [ "message", ".*status\'\:\s\'(?<unfinished_stock_status>\w*)" ]
        }
    }

    else if " ERROR:" in [message]{
        grok{
            match => [ "message", "%{TIMESTAMP_ISO8601}%{SPACE}%{NOTSPACE}%{SPACE}%{LOGLEVEL}%{NOTSPACE}%{SPACE}%{GREEDYDATA:error_msg}" ]
        }
    }

    else if "WARNING: Item at url" in [message]{
        grok{
            match => [ "message", "%{TIMESTAMP_ISO8601} %{NOTSPACE} WARNING: Item at url %{GREEDYDATA:unfinished_invalid_items} is not valid because it is missing" ]
        }
    }

    else{
        drop {}
    }


}

output {
    if "_grokparsefailure" not in [tags]{
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "running-%{merchant_name}"
        }
        stdout { codec => rubydebug }
	}
}
